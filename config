package.json初始化的时候，在文件夹路径，用npm init -y生成package.json
npm install webpack webpack-cli -D (在开发环境所依赖得包)
在webpack中，所有文件都是模块

npx是针对npm的扩展，就是指直接执行node_modules里面对应的bin下的webpack.cmd，比如npx webpack，如果发现没有安装webpack，那么会先安装webpack，再去执行node_modules里面对应的bin下的webpack.cmd

webpack.config.js是基于node的语法，common.js的写法
module.exports={}

webpack的插件包htmlWebpackPlugin,clean-webpack-plugin,style-loader,css-loader

在package.json中得scripts中编写对应得快捷键
{
  "start":'webpack-dev-server'
}

webpack.config.json中启动需要配置
entry:['',''],//可以写一个数组，数组里面有多个需要打包的文件，这说明把多个js放在一个js中输出
entry:{
  index: './src/index.js',
  a: './src/a.js'
},  //多入口，多个js分别输出相应多个js
output:{
  filename:'build.[hash:8].js',
  path: path.resolve('./build')
}
devServer:{
    contentBase:'./build',
    port: 3000,  //端口号
    compress: true,   //服务器压缩
    open: true,   //自动打开浏览器
    hot: true,  //说明可以热更新  属于webpack自带插件
}
也就是说用npx webpack-dev-server就会把打包的文件放在浏览器内存中根目录build文件夹下面，但是不会在本地出现，但是本地build目录下面如果有文件，通过浏览器路径也事可以访问到的



用插件的话，1.需要先npm install 插件 -D;
           2.需要先按照node方式引入let xxx = require('xxx')，引入后是一个类;
           3.所以在plugins里面需要new 一下这个类，并在实例化这个类的时候，传入相应的参数。
plugins:[
    new webpack.HotModuleReplacementPlugin(),//热更新插件实例化
    new CleanWebpackPlugin(['./build']) //删除打包生成的build文件夹
    new HtmlWebpackPlugin({
        filename: 'test.html', //生成的html是test.html
        template: './src/index.html', //模板是index.html
        title: 'demo', //htmlWebpackPlugin.option.title变量的值是demo
        hash: true,
        minify: {
            removeAttributeQuotes：true, //压缩掉html中的引号
            collapseWhitespace:true,
            
        },
        chunks:['index'] //生成的test.html引用index.js，这样就实现了多页面引用多脚本，如果不配置这个参数，打包到build目录下的html，并自动引入生产打包出来的所有js文件
        ...多种参数
    }) //webpack会记住这个html模板，会把打包生成的js，引入到这个html中。再把这个html生成在build目录中，同时也会把配置里面的各种变量生成后写在build文件的html中 
]
loader:[]
关于热更新，还需要在index.js中写上
if(module.hot){
 module.hot.accept()
}
这样凡是index.js中require的相应模块发生了变化，就会热更新，而不会刷新页面

npm run start (npx webpack-dev-server)这时候生成的代码存在浏览器中，不会出现build文件夹，会生成端口号路径，这样会提升打包性能，
npm run build (npx webpack) 会生成build文件夹，这时候在build文件夹中会生成打包文件，然后上线
使用webpack-dev-server服务器启动时，打包生成的文件在内存中，而使用webpack命令打包生成的bundle.js默认是在dist目录下，页面引用的时候路径不同。


